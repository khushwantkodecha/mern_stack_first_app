{"version":3,"sources":["Home.js","Posts.js","serviceWorker.js","index.js","App.js"],"names":["App","props","onChangeHandler","event","name","target","setState","value","sumbitHandler","payload","title","state","body","axios","url","method","data","headers","then","clearInput","catch","err","console","log","this","className","htmlFor","type","id","placeholder","onChange","rows","onClick","Component","Posts","getPosts","res","posts","length","map","i","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAoFeA,E,YAjFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,gBAAkB,SAAAC,GAChB,IAAMC,EAAOD,EAAME,OAAOD,KAC1B,EAAKE,SAAL,eAAiBF,EAAOD,EAAME,OAAOE,SAVpB,EAanBC,cAAgB,WACd,IAAMC,EAAU,CACdC,MAAO,EAAKC,MAAMD,MAClBE,KAAM,EAAKD,MAAMC,MAEnBC,IAAM,CACJC,IAAK,YACLC,OAAQ,OACRC,KAAMP,EACNQ,QAAS,CACP,8BAA+B,OAGhCC,MAAK,WACJ,EAAKC,gBAENC,OAAM,SAAAC,GACLC,QAAQC,IAAI,0CA9BC,EAiCnBJ,WAAa,WACX,EAAKb,SAAS,CACZI,MAAO,GACPE,KAAM,MAjCR,EAAKD,MAAQ,CACXD,MAAO,GACPE,KAAM,IALS,E,sEAyCjB,OADAU,QAAQC,IAAIC,KAAKb,OAEf,yBAAKc,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,cACb,wBAAIA,UAAU,eAAd,eACA,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,SAAf,UACA,2BACEC,KAAK,OACLF,UAAU,eACVG,GAAG,QACHxB,KAAK,QACLG,MAAOiB,KAAKb,MAAMD,MAClBmB,YAAY,cACZC,SAAUN,KAAKtB,mBAGnB,yBAAKuB,UAAU,cACb,2BAAOC,QAAQ,SAAf,SACA,8BACEC,KAAK,YACLF,UAAU,eACVG,GAAG,OACHxB,KAAK,OACL2B,KAAK,KACLxB,MAAOiB,KAAKb,MAAMC,KAClBiB,YAAY,aACZC,SAAUN,KAAKtB,mBAGnB,4BAAQyB,KAAK,SAASF,UAAU,kBAAkBO,QAASR,KAAKhB,eAAhE,SAIF,yBAAKiB,UAAU,e,GA5ELQ,aC+DHC,E,YA7Db,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRkC,SAAW,WACTtB,IAAM,CACJC,IAAK,aACLC,OAAQ,QAEPG,MAAK,SAAAkB,GACJ,EAAK9B,SAAS,CACZ+B,MAAOD,EAAIpB,UAGdI,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OApBhB,EAAKV,MAAQ,CACX0B,MAAO,IAJQ,E,iFASjBb,KAAKW,a,+BAmBL,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,cACb,2BAAOA,UAAU,wBACf,+BACE,4BACE,iCACA,kCACA,qCACA,sCAGHD,KAAKb,MAAM0B,MAAMC,OAAS,EACzB,+BACGd,KAAKb,MAAM0B,MAAME,KAAI,SAACvB,EAAMwB,GAAP,OACpB,wBAAIC,IAAKD,GACP,4BAAKA,EAAI,GACT,4BAAKxB,EAAK0B,KACV,4BAAK1B,EAAKN,OACV,4BAAKM,EAAKJ,WAId,OAGR,yBAAKa,UAAU,e,GAxDHQ,aCSAU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,mBCED,WACb,OAEE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAWlB,QDR9B,MAASoB,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.ee9987cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: \"\",\n      body: \"\"\n    };\n  }\n  onChangeHandler = event => {\n    const name = event.target.name;\n    this.setState({ [name]: event.target.value });\n  };\n\n  sumbitHandler = () => {\n    const payload = {\n      title: this.state.title,\n      body: this.state.body\n    };\n    axios({\n      url: \"/api/save\",\n      method: \"POST\",\n      data: payload,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    })\n      .then(() => {\n        this.clearInput();\n      })\n      .catch(err => {\n        console.log(\"we got an error during saving data\");\n      });\n  };\n  clearInput = () => {\n    this.setState({\n      title: \"\",\n      body: \"\"\n    });\n  };\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"row\">\n        <div className=\"col-4\"></div>\n        <div className=\"col-4 mt-3\">\n          <h1 className=\"text-center\">Create Post</h1>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Title:</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"title\"\n              name=\"title\"\n              value={this.state.title}\n              placeholder=\"Enter Title\"\n              onChange={this.onChangeHandler}\n            ></input>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Body:</label>\n            <textarea\n              type=\"textfield\"\n              className=\"form-control\"\n              id=\"body\"\n              name=\"body\"\n              rows=\"10\"\n              value={this.state.body}\n              placeholder=\"Enter Body\"\n              onChange={this.onChangeHandler}\n            ></textarea>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.sumbitHandler}>\n            Post\n          </button>\n        </div>\n        <div className=\"col-4\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  getPosts = () => {\n    axios({\n      url: \"/api/posts\",\n      method: \"GET\"\n    })\n      .then(res => {\n        this.setState({\n          posts: res.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-2\"></div>\n        <div className=\"col-8 mt-5\">\n          <table className=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <td>ID</td>\n                <th>Title</th>\n                <th>Body</th>\n              </tr>\n            </thead>\n            {this.state.posts.length > 0 ? (\n              <tbody>\n                {this.state.posts.map((data, i) => (\n                  <tr key={i}>\n                    <td>{i + 1}</td>\n                    <td>{data._id}</td>\n                    <td>{data.title}</td>\n                    <td>{data.body}</td>\n                  </tr>\n                ))}\n              </tbody>\n            ) : null}\n          </table>\n        </div>\n        <div className=\"col-2\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n//for routing\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n//for routing to home page we are importing Home.js file\nimport Home from \"./Home\";\nimport Posts from \"./Posts\";\n\n//creating functional component beacause there is no need of states\n//we are exporting this compent this component here itself\nexport default function App() {\n  return (\n    //router is useful for definf routing\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/posts\" component={Posts} />\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}